#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ShapeEditor2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Database1")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttblPicture(tblPicture instance);
    partial void UpdatetblPicture(tblPicture instance);
    partial void DeletetblPicture(tblPicture instance);
    partial void InserttblShape(tblShape instance);
    partial void UpdatetblShape(tblShape instance);
    partial void DeletetblShape(tblShape instance);
    partial void InserttblPoint(tblPoint instance);
    partial void UpdatetblPoint(tblPoint instance);
    partial void DeletetblPoint(tblPoint instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::ShapeEditor2.Properties.Settings.Default.Database1ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tblPicture> tblPictures
		{
			get
			{
				return this.GetTable<tblPicture>();
			}
		}
		
		public System.Data.Linq.Table<tblShape> tblShapes
		{
			get
			{
				return this.GetTable<tblShape>();
			}
		}
		
		public System.Data.Linq.Table<tblPoint> tblPoints
		{
			get
			{
				return this.GetTable<tblPoint>();
			}
		}
	}
	
	[Table(Name="dbo.tblPictures")]
	public partial class tblPicture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<tblShape> _tblShapes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public tblPicture()
		{
			this._tblShapes = new EntitySet<tblShape>(new Action<tblShape>(this.attach_tblShapes), new Action<tblShape>(this.detach_tblShapes));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="tblPicture_tblShape", Storage="_tblShapes", OtherKey="PicturesId")]
		public EntitySet<tblShape> tblShapes
		{
			get
			{
				return this._tblShapes;
			}
			set
			{
				this._tblShapes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblShapes(tblShape entity)
		{
			this.SendPropertyChanging();
			entity.tblPicture = this;
		}
		
		private void detach_tblShapes(tblShape entity)
		{
			this.SendPropertyChanging();
			entity.tblPicture = null;
		}
	}
	
	[Table(Name="dbo.tblShapes")]
	public partial class tblShape : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PicturesId;
		
		private string _Type;
		
		private System.Nullable<float> _Square;
		
		private EntitySet<tblPoint> _tblPoints;
		
		private EntityRef<tblPicture> _tblPicture;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPicturesIdChanging(int value);
    partial void OnPicturesIdChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnSquareChanging(System.Nullable<float> value);
    partial void OnSquareChanged();
    #endregion
		
		public tblShape()
		{
			this._tblPoints = new EntitySet<tblPoint>(new Action<tblPoint>(this.attach_tblPoints), new Action<tblPoint>(this.detach_tblPoints));
			this._tblPicture = default(EntityRef<tblPicture>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PicturesId", DbType="Int NOT NULL")]
		public int PicturesId
		{
			get
			{
				return this._PicturesId;
			}
			set
			{
				if ((this._PicturesId != value))
				{
					if (this._tblPicture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPicturesIdChanging(value);
					this.SendPropertyChanging();
					this._PicturesId = value;
					this.SendPropertyChanged("PicturesId");
					this.OnPicturesIdChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Square", DbType="Real")]
		public System.Nullable<float> Square
		{
			get
			{
				return this._Square;
			}
			set
			{
				if ((this._Square != value))
				{
					this.OnSquareChanging(value);
					this.SendPropertyChanging();
					this._Square = value;
					this.SendPropertyChanged("Square");
					this.OnSquareChanged();
				}
			}
		}
		
		[Association(Name="tblShape_tblPoint", Storage="_tblPoints", OtherKey="ShapeId")]
		public EntitySet<tblPoint> tblPoints
		{
			get
			{
				return this._tblPoints;
			}
			set
			{
				this._tblPoints.Assign(value);
			}
		}
		
		[Association(Name="tblPicture_tblShape", Storage="_tblPicture", ThisKey="PicturesId", IsForeignKey=true)]
		public tblPicture tblPicture
		{
			get
			{
				return this._tblPicture.Entity;
			}
			set
			{
				tblPicture previousValue = this._tblPicture.Entity;
				if (((previousValue != value) 
							|| (this._tblPicture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblPicture.Entity = null;
						previousValue.tblShapes.Remove(this);
					}
					this._tblPicture.Entity = value;
					if ((value != null))
					{
						value.tblShapes.Add(this);
						this._PicturesId = value.ID;
					}
					else
					{
						this._PicturesId = default(int);
					}
					this.SendPropertyChanged("tblPicture");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblPoints(tblPoint entity)
		{
			this.SendPropertyChanging();
			entity.tblShape = this;
		}
		
		private void detach_tblPoints(tblPoint entity)
		{
			this.SendPropertyChanging();
			entity.tblShape = null;
		}
	}
	
	[Table(Name="dbo.tblPoints")]
	public partial class tblPoint : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ShapeId;
		
		private int _X;
		
		private int _Y;
		
		private System.Nullable<int> _Position;
		
		private EntityRef<tblShape> _tblShape;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnShapeIdChanging(int value);
    partial void OnShapeIdChanged();
    partial void OnXChanging(int value);
    partial void OnXChanged();
    partial void OnYChanging(int value);
    partial void OnYChanged();
    partial void OnPositionChanging(System.Nullable<int> value);
    partial void OnPositionChanged();
    #endregion
		
		public tblPoint()
		{
			this._tblShape = default(EntityRef<tblShape>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ShapeId", DbType="Int NOT NULL")]
		public int ShapeId
		{
			get
			{
				return this._ShapeId;
			}
			set
			{
				if ((this._ShapeId != value))
				{
					if (this._tblShape.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShapeIdChanging(value);
					this.SendPropertyChanging();
					this._ShapeId = value;
					this.SendPropertyChanged("ShapeId");
					this.OnShapeIdChanged();
				}
			}
		}
		
		[Column(Storage="_X", DbType="Int NOT NULL")]
		public int X
		{
			get
			{
				return this._X;
			}
			set
			{
				if ((this._X != value))
				{
					this.OnXChanging(value);
					this.SendPropertyChanging();
					this._X = value;
					this.SendPropertyChanged("X");
					this.OnXChanged();
				}
			}
		}
		
		[Column(Storage="_Y", DbType="Int NOT NULL")]
		public int Y
		{
			get
			{
				return this._Y;
			}
			set
			{
				if ((this._Y != value))
				{
					this.OnYChanging(value);
					this.SendPropertyChanging();
					this._Y = value;
					this.SendPropertyChanged("Y");
					this.OnYChanged();
				}
			}
		}
		
		[Column(Storage="_Position", DbType="Int")]
		public System.Nullable<int> Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[Association(Name="tblShape_tblPoint", Storage="_tblShape", ThisKey="ShapeId", IsForeignKey=true)]
		public tblShape tblShape
		{
			get
			{
				return this._tblShape.Entity;
			}
			set
			{
				tblShape previousValue = this._tblShape.Entity;
				if (((previousValue != value) 
							|| (this._tblShape.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblShape.Entity = null;
						previousValue.tblPoints.Remove(this);
					}
					this._tblShape.Entity = value;
					if ((value != null))
					{
						value.tblPoints.Add(this);
						this._ShapeId = value.ID;
					}
					else
					{
						this._ShapeId = default(int);
					}
					this.SendPropertyChanged("tblShape");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
